{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ifttt-ember/tests/app.lint-test.js","ifttt-ember/tests/helpers/destroy-app.js","ifttt-ember/tests/helpers/module-for-acceptance.js","ifttt-ember/tests/helpers/start-app.js","ifttt-ember/tests/integration/components/if-equal-test.js","ifttt-ember/tests/integration/components/service-dropdown-test.js","ifttt-ember/tests/test-helper.js","ifttt-ember/tests/tests.lint-test.js","ifttt-ember/tests/unit/controllers/applet-test.js","ifttt-ember/tests/unit/models/applet-state-test.js","ifttt-ember/tests/unit/routes/applet-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ifttt-ember/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/if-equal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/if-equal.js should pass ESLint\\n\\n4:13 - Don\\'t use Ember\\'s function prototype extensions (ember/no-function-prototype-extensions)');\n  });\n\n  QUnit.test('components/service-dropdown.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/service-dropdown.js should pass ESLint\\n\\n2:8 - \\'EmberObject\\' is defined but never used. (no-unused-vars)\\n2:23 - \\'computed\\' is defined but never used. (no-unused-vars)\\n22:26 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n22:26 - \\'$\\' is not defined. (no-undef)\\n24:11 - \\'$\\' is not defined. (no-undef)\\n24:11 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n32:17 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n32:17 - \\'$\\' is not defined. (no-undef)\\n37:11 - \\'$\\' is not defined. (no-undef)\\n37:11 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n38:11 - \\'$\\' is not defined. (no-undef)\\n38:11 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n46:7 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n46:7 - \\'$\\' is not defined. (no-undef)\\n47:7 - \\'$\\' is not defined. (no-undef)\\n47:7 - Do not use global `$` or `jQuery` (ember/no-global-jquery)');\n  });\n\n  QUnit.test('controllers/applet.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/applet.js should pass ESLint\\n\\n91:17 - \\'key\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('models/applet-state.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/applet-state.js should pass ESLint\\n\\n1:8 - \\'DS\\' is defined but never used. (no-unused-vars)\\n8:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n9:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n13:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n32:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n37:9 - \\'oThis\\' is assigned a value but never used. (no-unused-vars)\\n49:59 - Unnecessary escape character: \\\\+. (no-useless-escape)\\n49:102 - Unnecessary escape character: \\\\+. (no-useless-escape)\\n57:9 - \\'re\\' is already defined. (no-redeclare)\\n57:57 - Unnecessary escape character: \\\\+. (no-useless-escape)\\n57:100 - Unnecessary escape character: \\\\+. (no-useless-escape)\\n58:9 - \\'isValid\\' is already defined. (no-redeclare)\\n63:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n67:3 - Duplicate key \\'triggerAddressDidChange\\'. (no-dupe-keys)\\n68:9 - \\'oThis\\' is assigned a value but never used. (no-unused-vars)\\n80:24 - Unnecessary escape character: \\\\[. (no-useless-escape)\\n80:49 - Unnecessary escape character: \\\\[. (no-useless-escape)');\n  });\n\n  QUnit.test('models/mockapi.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/mockapi.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/applet.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/applet.js should pass ESLint\\n\\n118:11 - \\'oThis\\' is already defined. (no-redeclare)');\n  });\n});","define('ifttt-ember/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('ifttt-ember/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ifttt-ember/tests/helpers/start-app', 'ifttt-ember/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('ifttt-ember/tests/helpers/start-app', ['exports', 'ifttt-ember/app', 'ifttt-ember/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ifttt-ember/tests/integration/components/if-equal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('if-equal', 'Integration | Component | if equal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EZKR8ahv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"if-equal\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"opGUd7/7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"if-equal\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ifttt-ember/tests/integration/components/service-dropdown-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('service-dropdown', 'Integration | Component | service dropdown', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FI5Zxhy4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"service-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2E7Te0a9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"service-dropdown\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ifttt-ember/tests/test-helper', ['ifttt-ember/app', 'ifttt-ember/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('ifttt-ember/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/if-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/if-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/service-dropdown-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/service-dropdown-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/applet-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/applet-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/applet-state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/applet-state-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/applet-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/applet-test.js should pass ESLint\\n\\n');\n  });\n});","define('ifttt-ember/tests/unit/controllers/applet-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:applet', 'Unit | Controller | applet', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ifttt-ember/tests/unit/models/applet-state-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('applet-state', 'Unit | Model | applet state', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('ifttt-ember/tests/unit/routes/applet-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:applet', 'Unit | Route | applet', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('ifttt-ember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}